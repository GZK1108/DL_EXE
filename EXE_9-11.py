# 练习9：多分类
# 练习10：泛化能力测试
# 练习11：更多测试集
import time

import numpy as np
from matplotlib import pyplot as plt

N = 50  # 设置隐层节点数
epochs = 10000  # 训练轮数

def sigmoid(x):
    return 1.0 / (1 + np.exp(-x))



def softmax(x):
    ex = np.exp(x)
    return ex / sum(ex)



def MultiClass(w1, w2, X, D):
    w2 = w2.reshape(5, N)
    alpha = 0.9  # 设置步长
    for i in range(5):
        x = X[:, :, i].reshape(25, 1)
        d = D[:, i].reshape(5, 1)
        v1 = np.dot(w1, x)  # 50x1
        y1 = sigmoid(v1)  # 50x1
        v = np.dot(w2, y1)  # w2:5x50 v:5x1
        y = softmax(v)  # 5x1
        e = d - y
        delta = e  # 计算输出层的delta 5x1
        # 开始反向传播
        e1 = np.dot(w2.T, delta)  # 这里不能使用 * ，需要使用矩阵乘，*为点乘，输出50x1矩阵
        delta1 = y1 * (1 - y1) * e1  # 点乘 50x1
        # 计算第1层更新
        dw1 = np.dot(alpha * delta1, x.T)  # 50x25
        w1 = w1 + dw1
        # 计算第2层更新
        dw2 = alpha * delta * y1.T  # 5x50
        w2 = w2 + dw2

    return w1, w2


if __name__ == "__main__":
    start = time.time()
    # 训练集
    X = np.zeros((5, 5, 5))
    X[:, :, 0] = [[0, 1, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 1, 1, 1, 0]]
    X[:, :, 1] = [[1, 1, 1, 1, 0], [0, 0, 0, 0, 1], [0, 1, 1, 1, 0], [1, 0, 0, 0, 0], [1, 1, 1, 1, 1]]
    X[:, :, 2] = [[1, 1, 1, 1, 0], [0, 0, 0, 0, 1], [0, 1, 1, 1, 0], [0, 0, 0, 0, 1], [1, 1, 1, 1, 0]]
    X[:, :, 3] = [[0, 0, 0, 1, 0], [0, 0, 1, 1, 0], [0, 1, 0, 1, 0], [1, 1, 1, 1, 1], [0, 0, 0, 1, 0]]
    X[:, :, 4] = [[1, 1, 1, 1, 1], [1, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 1], [1, 1, 1, 1, 0]]
    D = np.array([[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]])
    # 测试集
    X_test = np.zeros((5,5,5))
    X_test[:, :, 0] = [[0, 0, 1, 1, 0], [0, 0, 1, 1, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 1, 0]]
    X_test[:, :, 1] = [[1, 1, 1, 1, 0], [0, 0, 0, 0, 1], [0, 1, 1, 1, 0], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1]]
    X_test[:, :, 2] = [[1, 1, 1, 1, 0], [0, 0, 0, 0, 1], [0, 1, 1, 1, 0], [1, 0, 0, 0, 1], [1, 1, 1, 1, 0]]
    X_test[:, :, 3] = [[0, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 1, 0]]
    X_test[:, :, 4] = [[0, 1, 1, 1, 1], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0], [1, 1, 1, 1, 0]]
    D_test = np.array([[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 1]])
    # 新测试集
    X1 = np.zeros((5, 5, 5))
    X1[:, :, 0] = [[0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 1, 1, 0]]
    X1[:, :, 1] = [[1, 1, 1, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 1, 0], [1, 0, 0, 0, 0], [1, 1, 1, 1, 0]]
    X1[:, :, 2] = [[1, 1, 1, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0], [1, 1, 1, 1, 0]]
    X1[:, :, 3] = [[1, 0, 0, 1, 0], [1, 0, 0, 1, 0], [1, 0, 0, 1, 0], [1, 1, 1, 1, 0], [0, 0, 0, 1, 0]]
    X1[:, :, 4] = [[1, 1, 1, 1, 0], [1, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 1, 0], [1, 1, 1, 1, 0]]
    # 设置随机数种子
    rd = np.random.RandomState(42)
    w1 = np.array(2 * rd.rand(N, 25) - 1)
    w2 = np.array(2 * rd.rand(5, N) - 1)
    """print('初始权重为\n')
    print('w1:', w1)
    print('w2:', w2)"""

    # 模型训练
    start = time.time()
    for i in range(epochs):
        w1, w2 = MultiClass(w1, w2, X, D)
    end = time.time()
    print('耗时为：', end - start)

    """print('\n最终权重为\n')
    print('w1:', w1)
    print('w2:', w2, '\n')"""

    # 计算训练输出
    for i in range(5):
        x = X[:, :, i].reshape(25, 1)
        v1 = np.dot(w1, x)  # 50x1
        y1 = sigmoid(v1)  # 50x1
        v = np.dot(w2, y1)  # w2:5x50 v:5x1
        y = softmax(v)  # 5x1
        y = np.around(y, decimals=2)
        print(f'第{i+1}个样本训练结果为：\n',y)

    # 测试集
    for i in range(5):
        x = X1[:, :, i].reshape(25, 1)
        v1 = np.dot(w1, x)  # 50x1
        y1 = sigmoid(v1)  # 50x1
        v = np.dot(w2, y1)  # w2:5x50 v:5x1
        y = softmax(v)  # 5x1
        y = np.around(y, decimals=2)
        print(f'第{i+1}个测试样本结果为：\n',y)


